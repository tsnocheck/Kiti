import {IFeature} from "../../lib/discord/Feature";
import {ActionRowBuilder, ButtonBuilder, ButtonInteraction, ButtonStyle, EmbedBuilder, type User} from 'discord.js';
import {BotClient} from "../../lib/discord/Client";

export default class LikeBtn implements IFeature<ButtonInteraction> {
  name = "LikeBtn";

  async run({interaction, client}: { interaction: ButtonInteraction, client: BotClient }): Promise<any> {
    let likedByUser = await client.userUsecase.findByUserId(interaction.customId.split('_')[1]);
    let author = await client.userUsecase.findByUserId(interaction.user.id);

    const member: User = await client.users.fetch(interaction.customId.split('_')[1]) as User;
    
    let emb = new EmbedBuilder()
      .setTitle('–ê–Ω–∫–µ—Ç–∞')
      .setDescription(`
        **–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ <@${likedByUser?.userId}>**
        
        ${likedByUser?.name}, ${likedByUser?.age}, ${likedByUser?.city}
        ${likedByUser?.status}
      `)
      .setColor('#bbffd3')
      .setImage(likedByUser?.photo || null);
    
    let userRow = new ActionRowBuilder<ButtonBuilder>() //—á–µ–ª –∫–æ—Ç–æ—Ä—ã–π –ª–∞–π–∫–Ω—É–ª —á–µ—Ä–µ–∑ /like
    let likesRow = new ActionRowBuilder<ButtonBuilder>() //—á–µ–ª –∫–æ—Ç–æ—Ä—ã–π –ª–∞–π–∫–Ω—É–ª —á–µ—Ä–µ–∑ /find
    
    let button = new ButtonBuilder()
      .setURL(`https://discord.com/users/${likedByUser?.userId}`)
      .setEmoji('<:sendIcon:1275114387786694749>')
      .setStyle(ButtonStyle.Link)
    
    userRow.addComponents(button)
    
    await interaction.deferUpdate()
    await interaction.editReply({embeds:[emb], components:[userRow]})
    
    button.setURL(`https://discord.com/users/${interaction.user.id}`)
    likesRow.addComponents(button)
    
    emb
      .setDescription(`
        **–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ <@${author?.userId}>**
        
        ${author?.name}, ${author?.age}, ${author?.city}
        ${author?.status}
      `)
      .setImage(author?.photo || null);
    
    await member?.send({embeds:[emb], components:[likesRow]})
    await client.userUsecase.addViewed(interaction.user.id, likedByUser!.userId);
    const authorLikes = await client.userUsecase.deleteLikedByForm(likedByUser!.userId, interaction.user.id);

    if (!authorLikes?.likedBy || authorLikes.likedBy.length === 0) {
      await interaction.followUp({
        content: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        ephemeral: true
      });
    }else{
      let likedToForm = await client.userUsecase.getFormForObjectId(authorLikes?.likedBy[0]._id);
      
      let embed = new EmbedBuilder()
        .setTitle('–ê–Ω–∫–µ—Ç–∞')
        .setDescription(`
        **–í–∞—Å –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**
      
        ${likedToForm?.name}, ${likedToForm?.age}, ${likedToForm?.city}
        ${likedToForm?.status}
      `)
        .setColor('#bbffd3')
        .setImage(likedToForm?.photo || null);
      
      let button = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`LikeBtn_${likedToForm?.userId}`)
            .setEmoji('<:likeIcon:1273558975966744620>')
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId(`DislikeBtn_${likedToForm?.userId}`)
            .setEmoji('<:dislikeIcon:1273559004014055497>')
            .setStyle(ButtonStyle.Danger),
        )

      await interaction.followUp({embeds: [embed], components: [button]});
    }
  }
}
