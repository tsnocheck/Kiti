const { Client } = require("discord.js");
const Discord = require("discord.js");
const ms = require('ms');
const moment = require("moment");
const User = require("../../user");
const { MessageEmbed, Message, MessageAttachment} = require('discord.js');
const { MessageButton, MessageSelectMenu, WebhookClient,} = require('discord.js');
const { MessageActionRow, Modal, TextInputComponent, CommandInteraction } = require('discord.js');
messagefind = new Map()
module.exports = {
   name: "like",
   description: "—É–∑–Ω–∞—Ç—å –∫–æ–º—É —Ç—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è",
   type: "CHAT_INPUT",

run: async (client, interaction, args, message) => {
   let member = interaction.guild.members.cache.get(interaction.user.id);
   let user = await User.findOne({userID:interaction.user.id})
   if(!user){
      const regestration = new MessageEmbed()
      .setTitle('–ê–Ω–∫–µ—Ç–∞')
      .setDescription('**–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –µ–µ —Å–æ–∑–¥–∞—Ç—å?**')
      .setThumbnail(member.displayAvatarURL({dynamic:true}))
      .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
      .setTimestamp();

      const but = new MessageActionRow()
      .addComponents(
         new MessageButton()
         .setCustomId('create')
         .setLabel(`–°–æ–∑–¥–∞—Ç—å`)
         .setStyle(`SUCCESS`)
      )
      let msg = await interaction.reply({embeds:[regestration], components:[but], fetchReply:true})
      const collector = await msg.createMessageComponentCollector()
      messagefind.set(interaction.user.id, msg);
      collector.on('collect', async i => {
         if(i.customId == 'create'){
         if(i.user.id != interaction.user.id) return i.reply({content:'–≠—Ç–æ –Ω–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ', ephemeral:true})
         const modal = new Modal()
            .setCustomId('anketa')
            .setTitle('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É');
         const name = new TextInputComponent()
            .setCustomId('name')
            .setLabel("–í–∞—à–µ –∏–º—è")
            .setStyle('SHORT')
            .setRequired(true)
         const age = new TextInputComponent()
            .setCustomId('age')
            .setLabel("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
            .setStyle('SHORT')
            .setRequired(true)
         const sex = new TextInputComponent()
            .setCustomId('sex')
            .setLabel("–í–∞—à –ø–æ–ª (–ú –∏–ª–∏ –ñ)")
            .setStyle('SHORT')
            .setRequired(true)
         const status = new TextInputComponent()
            .setCustomId('status')
            .setLabel("–í–∞—à —Å—Ç–∞—Ç—É—Å")
            .setStyle('PARAGRAPH')
            .setRequired(true)
         const photo = new TextInputComponent()
            .setCustomId('photo')
            .setLabel("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ —Ñ–æ—Ç–æ")
            .setStyle('SHORT')
            .setRequired(true)
        const q = new MessageActionRow().addComponents(name);
        const w = new MessageActionRow().addComponents(age);
        const e = new MessageActionRow().addComponents(status);
        const t = new MessageActionRow().addComponents(photo);
        const r = new MessageActionRow().addComponents(sex);
        modal.addComponents(q,w,r,e,t);
        await i.showModal(modal);
         }
      })
   }else{
      async function showLikedProfiles(interaction) {
         await interaction.deferReply({ ephemeral: true });
         const userID = interaction.user.id;
         const user = await User.findOne({ userID });
         if (!user) {
           console.error(`User ${userID} not found in database`);
           return;
         }
         const likedProfiles = await User.find({ _id: { $in: user.likes } });
         if (likedProfiles.length === 0) {
           // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
           await interaction.editReply({
             content: '–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—Å :(',
             ephemeral: true,
           });
           return;
         }
       
         let currentProfileIndex = 0;
       
         const likeButton = new MessageButton()
           .setCustomId('like')
           .setLabel('üíñ –õ–∞–π–∫')
           .setStyle('SUCCESS');
       
         const dislikeButton = new MessageButton()
           .setCustomId('dislike')
           .setLabel('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å')
           .setStyle('DANGER');
       
         const buttonsRow = new MessageActionRow().addComponents(
           likeButton,
           dislikeButton
         );
       
         const updateProfile = async () => {
           const profile = likedProfiles[currentProfileIndex];
       
           const profileEmbed = new MessageEmbed()
             .setTitle('–ê–Ω–∫–µ—Ç–∞')
             .setDescription(`
               **${profile.names}, ${profile.age}
               ${profile.status}**
             `)
             .setImage(profile.photo)
             .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
             .setTimestamp();
       
           await interaction.editReply({
             embeds: [profileEmbed],
             components: [buttonsRow],
             ephemeral: true,
           });
         };

         const profileLike = async () => {
            const profile = likedProfiles[currentProfileIndex];
        
            const profileEmbed = new MessageEmbed()
              .setTitle('–ê–Ω–∫–µ—Ç–∞')
              .setDescription(`
              **–ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ <@${profile.userID}>

              ${profile.names}, ${profile.age}
              ${profile.status}**
              `)
              .setImage(user.photo)
              .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
              .setTimestamp();
              const buttonsRow = new MessageActionRow().addComponents(
               new MessageButton()
               .setURL(`https://discord.com/users/${profile.userID}/`)
               .setLabel('–°–≤—è–∑–∞—Ç—å—Å—è')
               .setStyle('LINK')
             );
             await interaction.followUp({
               embeds: [profileEmbed],
               components: [buttonsRow],
               ephemeral: true,
             });
          };

         const sendM = async () => {
            const profile = likedProfiles[currentProfileIndex];
        
            const profileEmbed = new MessageEmbed()
              .setTitle('–ê–Ω–∫–µ—Ç–∞')
              .setDescription(`
              **–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è üëâ <@${user.userID}>

              ${user.names}, ${user.age}
              ${user.status}**
              `)
              .setImage(user.photo)
              .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
              .setTimestamp();
              const buttonsRow = new MessageActionRow().addComponents(
               new MessageButton()
               .setURL(`https://discord.com/users/${user.userID}/`)
               .setLabel('–°–≤—è–∑–∞—Ç—å—Å—è')
               .setStyle('LINK')
             );
            let members = interaction.guild.members.cache.get(profile.userID);
            members.send({embeds:[profileEmbed], components:[buttonsRow]})
          };
       
         const handleInteraction = async (i) => {
           if (i.user.id !== interaction.user.id) {
             await i.reply({
               content: '–≠—Ç–æ –Ω–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å',
               ephemeral: true,
             });
             return;
           }
       
           switch (i.customId) {
            case 'like':
               user.likes = user.likes.filter((id) => id.toString() !== likedProfiles[currentProfileIndex]._id.toString());
               await user.save();
               await sendM()
               await profileLike()
               currentProfileIndex++;
               if (currentProfileIndex >= likedProfiles.length) {
                   const profileEmbed = new MessageEmbed()
                   .setTitle('–ê–Ω–∫–µ—Ç–∞')
                   .setDescription(`**–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –≤–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**`)
                   .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
                   .setTimestamp();
                   await interaction.editReply({
                       embeds:[profileEmbed],
                       components: [],
                       ephemeral: true,
                   });
               } else {
                   await i.reply({content:'–í—ã –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ephemeral:true})
                   await updateProfile();
               }
               break;
       
             case 'dislike':
               user.likes = user.likes.filter((id) => id.toString() !== likedProfiles[currentProfileIndex]._id.toString());
               await user.save();
               currentProfileIndex++;
               if (currentProfileIndex >= likedProfiles.length) {
                  const profileEmbed = new MessageEmbed()
                  .setTitle('–ê–Ω–∫–µ—Ç–∞')
                  .setDescription(`**–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –≤–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**`)
                  .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
                  .setTimestamp();
                 await interaction.editReply({
                  embeds:[profileEmbed],
                   components: [],
                   ephemeral: true,
                 });
                 i.reply({content:'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ephemeral:true})
                 return;
               }
       
               await updateProfile();
               break;
       
             default:
               break;
           }
         };
       
         await updateProfile();
       
         const collector = interaction.channel.createMessageComponentCollector({
           filter: (i) => i.user.id === interaction.user.id && (i.customId === 'like' || i.customId === 'dislike'),
           time: 60000,
         });
       
         collector.on('collect', handleInteraction);
         collector.on('end', async () => {
           await interaction.editReply({
             components: [],
           });
         });
       }
       showLikedProfiles(interaction)
         }
   }
}