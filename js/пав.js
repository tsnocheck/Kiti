const { Client } = require("discord.js");
const Discord = require("discord.js");
const ms = require('ms');
const moment = require("moment");
const User = require("../../user");
const { MessageEmbed, Message, MessageAttachment} = require('discord.js');
const { MessageButton, MessageSelectMenu, WebhookClient,} = require('discord.js');
const { MessageActionRow, Modal, TextInputComponent, CommandInteraction } = require('discord.js');
messagefind = new Map()
module.exports = {
   name: "find",
   description: "–ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç",
   type: "CHAT_INPUT",

run: async (client, interaction, args, message) => {
   let member = interaction.guild.members.cache.get(interaction.user.id);
   let user = await User.findOne({userID:interaction.user.id, guild:interaction.guild.id})
   if(!user){
      const regestration = new MessageEmbed()
      .setTitle('–ê–Ω–∫–µ—Ç–∞')
      .setDescription('**–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –µ–µ —Å–æ–∑–¥–∞—Ç—å?**')
      .setThumbnail(member.displayAvatarURL({dynamic:true}))
      .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
      .setTimestamp();

      const but = new MessageActionRow()
      .addComponents(
         new MessageButton()
         .setCustomId('create')
         .setLabel(`–°–æ–∑–¥–∞—Ç—å`)
         .setStyle(`SUCCESS`)
      )
      let msg = await interaction.reply({embeds:[regestration], components:[but], fetchReply:true})
      const collector = await msg.createMessageComponentCollector()
      messagefind.set(interaction.user.id, msg);
      collector.on('collect', async i => {
         if(i.customId == 'create'){
         if(i.user.id != interaction.user.id) return i.reply({content:'–≠—Ç–æ –Ω–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ', ephemeral:true})
         const modal = new Modal()
            .setCustomId('anketa')
            .setTitle('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É');
         const name = new TextInputComponent()
            .setCustomId('name')
            .setLabel("–í–∞—à–µ –∏–º—è")
            .setStyle('SHORT')
            .setRequired(true)
         const age = new TextInputComponent()
            .setCustomId('age')
            .setLabel("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
            .setStyle('SHORT')
            .setRequired(true)
         const sex = new TextInputComponent()
            .setCustomId('sex')
            .setLabel("–í–∞—à –ø–æ–ª (–ú –∏–ª–∏ –ñ)")
            .setStyle('SHORT')
            .setRequired(true)
         const status = new TextInputComponent()
            .setCustomId('status')
            .setLabel("–í–∞—à —Å—Ç–∞—Ç—É—Å")
            .setStyle('PARAGRAPH')
            .setRequired(true)
         const photo = new TextInputComponent()
            .setCustomId('photo')
            .setLabel("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ —Ñ–æ—Ç–æ")
            .setStyle('SHORT')
            .setRequired(true)
        const q = new MessageActionRow().addComponents(name);
        const w = new MessageActionRow().addComponents(age);
        const e = new MessageActionRow().addComponents(status);
        const t = new MessageActionRow().addComponents(photo);
        const r = new MessageActionRow().addComponents(sex);
        modal.addComponents(q,w,r,e,t);
        await i.showModal(modal);
         }
      })
   }else{
      async function getAndSendRandomProfile(interaction) {
         const user = await User.findOne({ userID: interaction.user.id });
         if (!user) {
           // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
           console.error(`User ${interaction.user.id} not found in database`);
           return;
         }
       
         const unviewedProfiles = await User.find({ _id: { $nin: user.vising }, userID: { $ne: interaction.user.id } });
         if (unviewedProfiles.length === 0) {
           // –ï—Å–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –±—ã–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
           const noMoreProfilesEmbed = new MessageEmbed()
               const no = new MessageEmbed()
               .setTitle(`–ê–Ω–∫–µ—Ç—ã`)
               .setDescription(`
               **–ê–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —á—É—Ç—å –ø–æ–∑–∂–µ**
               `)
               .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
               .setTimestamp();
       
           await interaction.reply({ embeds: [no]});
           return;
         }
       
         // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
         const randomProfile = unviewedProfiles[Math.floor(Math.random() * unviewedProfiles.length)];
       
         // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
         user.vising.push(randomProfile._id);
         await user.save();

         const but = new MessageActionRow()
         .addComponents(
            new MessageButton()
            .setCustomId('find')
            .setEmoji('‚û°')
            .setStyle(`SUCCESS`),
            new MessageButton()
            .setCustomId('like')
            .setEmoji('üíñ')
            .setStyle(`SUCCESS`),
            new MessageButton()
            .setCustomId('message')
            .setEmoji('üíå')
            .setStyle(`SUCCESS`),
            new MessageButton()
            .setCustomId('report')
            .setEmoji('üìÉ')
            .setStyle(`DANGER`),
         )
         // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∫–µ—Ç—É
         const profileEmbed = new MessageEmbed()
           .setTitle('–ê–Ω–∫–µ—Ç–∞')
           .setDescription(`
             **${randomProfile.names}, ${randomProfile.age}
             ${randomProfile.status}**
           `)
           .setImage(randomProfile.photo)
           .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
           .setTimestamp();
       
         let msg = await interaction.reply({ embeds: [profileEmbed], components:[but], fetchReply:true });
         const collector = await msg.createMessageComponentCollector()
         collector.on('collect', async i => {
            if(i.user.id != interaction.user.id) return i.reply({content:'–≠—Ç–æ –Ω–µ –≤–∞—à –ø–æ–∏—Å–∫. –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /find', ephemeral:true})
            if(i.customId == 'find'){
               const user = await User.findOne({ userID: interaction.user.id });
               if (!user) {
                 // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                 console.error(`User ${i.user.id} not found in database`);
                 return;
               }
             
               const unviewedProfiles = await User.find({ _id: { $nin: user.vising }, userID: { $ne: interaction.user.id } });
               if (unviewedProfiles.length === 0) {
                 // –ï—Å–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –±—ã–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
                 const noMoreProfilesEmbed = new MessageEmbed()
                     const no = new MessageEmbed()
                     .setTitle(`–ê–Ω–∫–µ—Ç—ã`)
                     .setDescription(`
                     **–ê–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —á—É—Ç—å –ø–æ–∑–∂–µ**
                     `)
                     .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${i.user.tag}` })
                     .setTimestamp();
             
                 await msg.edit({ embeds: [no], components:[]});
                 return;
               }
             
               // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
               const randomProfile = unviewedProfiles[Math.floor(Math.random() * unviewedProfiles.length)];
             
               // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –≤ –º–∞—Å—Å–∏–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
               user.vising.push(randomProfile._id);
               await user.save();
      
               const but = new MessageActionRow()
               .addComponents(
                  new MessageButton()
                  .setCustomId('find')
                  .setEmoji('‚û°')
                  .setStyle(`SUCCESS`),
                  new MessageButton()
                  .setCustomId('like')
                  .setEmoji('üíñ')
                  .setStyle(`SUCCESS`),
                  new MessageButton()
                  .setCustomId('message')
                  .setEmoji('üíå')
                  .setStyle(`SUCCESS`),
                  new MessageButton()
                  .setCustomId('report')
                  .setEmoji('üìÉ')
                  .setStyle(`DANGER`),
               )
               // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∫–µ—Ç—É
               const profileEmbed = new MessageEmbed()
                 .setTitle('–ê–Ω–∫–µ—Ç–∞')
                 .setDescription(`
                   **${randomProfile.names}, ${randomProfile.age}
                   ${randomProfile.status}**
                 `)
                 .setImage(randomProfile.photo)
                 .setFooter({ text: `–í—ã–ø–æ–ª–Ω–∏–ª: ${interaction.user.tag}` })
                 .setTimestamp();
                 messagefind.set(interaction.user.id, randomProfile._id)
                 await i.update({embeds:[profileEmbed], components:[but]})
            }
            if(i.customId == 'like'){
                  const userID = i.user.id;
                  const profileID = messagefind.get(userID);
                  const user = await User.findOne({ userID });
                  if (!user) {
                    console.error(`User ${userID} not found in database`);
                    return;
                  }
                  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –ª–∞–π–∫–Ω—É–ª–∏
                  const likedUser = await User.findOne({ _id: profileID });
                  let member = interaction.guild.members.cache.get(likedUser.userID);
                  if (!likedUser) {
                    console.error(`Profile ${profileID} not found in database`);
                    return;
                  }
                  const dmlike = new MessageEmbed()
                  .setTitle('–ê–Ω–∫–µ—Ç—ã')
                  .setDescription(`
                  **–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è 1 —á–µ–ª–æ–≤–µ–∫—É. –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º—É —Ç—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è? –ò—Å–ø–æ–ª—å–∑—É–π —Å–µ—Ä–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É \`/like\`**
                  `)
                  .setTimestamp();
                  likedUser.likes.push(user._id); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à ID –≤ —Å–ø–∏—Å–æ–∫ –µ–≥–æ –ª–∞–π–∫–æ–≤
                  await likedUser.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                  await user.save();
                  member.send({embeds:[dmlike]})
             }
         })
       }
       getAndSendRandomProfile(interaction)
         }
   }
}