services:
  bot:
    container_name: bot
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - mongo
    networks:
      - bridge
    restart: no
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: on-failure
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb:/data/db
    ports:
      - "27017:27017"
    networks:
      - bridge
  mongo-express:
    image: mongo-express
    restart: on-failure
    ports:
      - "8081:8081"
    networks:
      - bridge
    env_file:
      - .env
    environment:
    - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
    - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    - ME_CONFIG_MONGODB_URL=${MONGOURI}
    - ME_CONFIG_BASICAUTH=false
    depends_on:
      - mongo
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-data:/etc/grafana/provisioning/datasources
    env_file:
      - .env
    networks:
      - bridge
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - bridge
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    ports:
      - "9091:9091"
    networks:
      - bridge
    labels:
      org.label-schema.group: "monitoring"
volumes:
  mongodb:
  grafana-data:
  bot:
  prom_data:

networks:
  bridge:
